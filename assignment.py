# -*- coding: utf-8 -*-
"""assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qQHKQsejr_WGAoiLvugwYzVaLOycq_Dn
"""

!pip install PyPDF2 openai python-dotenv flask-ngrok

!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip

# Replace <YOUR_NGROK_AUTH_TOKEN> with your token
!./ngrok authtoken <2m4eS8lhcSyYPgwU1jOLKdJV51L_2k86o7HuJSheehAnpyuC2>

from flask import Flask, request, send_file
from flask_ngrok import run_with_ngrok
from PyPDF2 import PdfReader
import openai
from dotenv import load_dotenv
from io import BytesIO
import os

# Load environment variables
load_dotenv()

app = Flask(__name__)
run_with_ngrok(app)  # Enables ngrok when running the app

# Your existing Flask app code goes here

@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>PDF to HTML Resume Generator</title>
        <style>
            body {font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 20px;}
            .container {max-width: 600px; margin: 0 auto; padding: 20px; background-color: white;
                        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); border-radius: 8px;}
            h1 {text-align: center;}
            label, input, button {width: 100%; margin-top: 10px; padding: 10px; font-size: 1rem;}
            button {background-color: #007BFF; color: white; border: none; cursor: pointer;}
            button:hover {background-color: #0056b3;}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Generate HTML Resume from LinkedIn PDF</h1>
            <form action="/upload" method="post" enctype="multipart/form-data">
                <label for="api_key">Enter OpenAI API Key:</label><br>
                <input type="text" id="api_key" name="api_key" required><br><br>

                <label for="file">Upload LinkedIn PDF Resume:</label><br>
                <input type="file" id="file" name="file" accept=".pdf" required><br><br>

                <button type="submit">Generate HTML Resume</button>
            </form>
        </div>
    </body>
    </html>
    '''

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return "No file uploaded", 400

    file = request.files['file']

    if file.filename == '':
        return "No selected file", 400

    if file and file.filename.endswith('.pdf'):
        pdf_reader = PdfReader(file)
        pdf_text = "".join(page.extract_text() for page in pdf_reader.pages)

        # Generate HTML from PDF text using OpenAI
        openai_api_key = request.form['api_key']
        html_resume = generate_html_resume(pdf_text, openai_api_key)

        # Serve the HTML as a downloadable file
        return serve_html_as_file(html_resume)

    return "Invalid file type", 400

def generate_html_resume(pdf_text, api_key):
    openai.api_key = api_key

    prompt = f"Convert the following resume text into a well-structured HTML:\n{pdf_text}"

    response = openai.Completion.create(
        engine="text-davinci-004",  # You can switch to GPT-4 when it's available
        prompt=prompt,
        max_tokens=3000
    )

    return response['choices'][0]['text']

def serve_html_as_file(html_content):
    output = BytesIO()
    output.write(html_content.encode('utf-8'))
    output.seek(0)

    return send_file(output, as_attachment=True, download_name="resume.html", mimetype='text/html')

if __name__ == '__main__':
    app.run()

from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)  # Start ngrok when app runs

@app.route('/')
def index():
    return "Flask App with Ngrok"

if __name__ == '__main__':
    app.run()

requirements = """
Flask
PyPDF2
openai
python-dotenv
"""

with open('requirements.txt', 'w') as f:
    f.write(requirements)

{
  "version": 2,
  "builds": [
    { "src": "app.py", "use": "@vercel/python" }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "app.py" }
  ]
}

!apt-get install git

!git config --global user.name "justaraj"
!git config --global user.email "justaraj@kgpian.iitkgp.ac.in"

!rm -rf assignment-html

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/justaraj/assignment-html.git
# %cd assignment-html

!pip freeze > requirements.txt

from google.colab import files
files.download('requirements.txt')

app_code = """
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, World!"

@app.route('/echo', methods=['POST'])
def echo():
    data = request.json
    return jsonify(data)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
"""

with open('app.py', 'w') as f:
    f.write(app_code)

files.download('app.py')

# Move your files to the GitHub repo directory
!cp app.py /content/assgignment-html/
!cp requirements.txt /content/assgignment-html/